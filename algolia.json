[{"author":null,"categories":["Tech"],"content":"做数据分析的时候，往往需要联合多张数据表进行各种Join操作，SQL语言中的各种Join语句比较难记，本文通过图表的方式将Join操作更直观地进行解释，也能更容易理解和记忆。","date":1492038936,"description":"做数据分析的时候，往往需要联合多张数据表进行各种Join操作，SQL语言中的各种Join语句比较难记，本文通过图表的方式将Join操作更直观地进行解释，也能更容易理解和记忆。","dir":"post/","excerpt_html":"做数据分析的时候，往往需要联合多张数据表进行各种Join操作，SQL语言中的各种Join语句比较难记，本文通过图表的方式将Join操作更直观地进行解释，也能更容易理解和记忆。","excerpt_text":"做数据分析的时候，往往需要联合多张数据表进行各种Join操作，SQL语言中的各种Join语句比较难记，本文通过图表的方式将Join操作更直观地进行解释，也能更容易理解和记忆。","expirydate":-62135596800,"fuzzywordcount":300,"html":"做数据分析的时候，往往需要联合多张数据表进行各种Join操作，SQL语言中的各种Join语句比较难记，本文通过图表的方式将Join操作更直观地进行解释，也能更容易理解和记忆。","keywords":[],"kind":"page","lang":"en","lastmod":1492038936,"objectID":"a1371b1922f8061ac54a19d26bd6b339","permalink":"http://codelog.me/2017/04/12/sql-join-in-detail/","publishdate":"2017-04-12T23:15:36Z","readingtime":2,"relpermalink":"/2017/04/12/sql-join-in-detail/","section":"post","summary":"\u003cp\u003e如果你也曾经被SQL语言中各种Join操作：Left Join, Right Join, Inner Join等搞晕了头，那么这篇文章比较适合你。本文通过维恩图演示各种Join语句的执行效果，简单直白容易记忆。\u003ca href=\"https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/\"\u003e原文见\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e假如有两张表 \u003cstrong\u003eTable A\u003c/strong\u003e 和 \u003cstrong\u003eTable B\u003c/strong\u003e, 表数据如下:\nTable A:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003ePirate\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003eMonkey\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003eNinja\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003eSpaghetti\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eTable B:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eRutabaga\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003ePirate\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003eDarth Vader\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003eNinja\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e下面我们来看看各种Join的执行效果\u003c/p\u003e","tags":["SQL"],"title":"图说SQL Join","type":"post","url":"/2017/04/12/sql-join-in-detail/","weight":0,"wordcount":276},{"author":null,"categories":["Tech"],"content":"Linux的包管理系统五花八门，本文主要是对主流的Linux包管理系统之间的关系进行了梳理","date":1452815027,"description":"Linux的包管理系统五花八门，本文主要是对主流的Linux包管理系统之间的关系进行了梳理","dir":"post/","excerpt_html":"Linux的包管理系统五花八门，本文主要是对主流的Linux包管理系统之间的关系进行了梳理","excerpt_text":"Linux的包管理系统五花八门，本文主要是对主流的Linux包管理系统之间的关系进行了梳理","expirydate":-62135596800,"fuzzywordcount":100,"html":"Linux的包管理系统五花八门，本文主要是对主流的Linux包管理系统之间的关系进行了梳理","keywords":[],"kind":"page","lang":"en","lastmod":1452815027,"objectID":"634bfa6adeb81a2f6b71a09ea448dd9e","permalink":"http://codelog.me/2016/01/14/linux-package-management/","publishdate":"2016-01-14T23:43:47Z","readingtime":1,"relpermalink":"/2016/01/14/linux-package-management/","section":"post","summary":"\u003cp\u003e\u003cimg src=\"http://codelog.me/img/2016-01-14-linux-package-management/linux-package-management.png\"\u003e\u003c/p\u003e\n\n\u003cp\u003e简单来说，Linux \u003cstrong\u003e包管理系统（package management）\u003c/strong\u003e 指的是在Linux系统上安装删除或者更新软件的一种工具。不同Linux发行版本的应用软件打包格式各不相同, 譬如：Debian系列的Linux安装包格式为: *.deb; CentOS的为: *.rpm; openSUSE也是: *.rpm。 由于不同Linux发行版本安装包格式的差异性，也导致了不同Linix发行版之间包管理工具不尽相同。\u003c/p\u003e","tags":["Linux"],"title":"Linux包管理扫盲帖","type":"post","url":"/2016/01/14/linux-package-management/","weight":0,"wordcount":71},{"author":null,"categories":["Tech"],"content":"对于Linux初学者来说，往往比较关心的一个问题是Linux系统里安装的软件，其文件究竟是放在哪个目录的？本文将对该问题进行简单的介绍","date":1452644038,"description":"对于Linux初学者来说，往往比较关心的一个问题是Linux系统里安装的软件，其文件究竟是放在哪个目录的？本文将对该问题进行简单的介绍","dir":"post/","excerpt_html":"对于Linux初学者来说，往往比较关心的一个问题是Linux系统里安装的软件，其文件究竟是放在哪个目录的？本文将对该问题进行简单的介绍","excerpt_text":"对于Linux初学者来说，往往比较关心的一个问题是Linux系统里安装的软件，其文件究竟是放在哪个目录的？本文将对该问题进行简单的介绍","expirydate":-62135596800,"fuzzywordcount":100,"html":"对于Linux初学者来说，往往比较关心的一个问题是Linux系统里安装的软件，其文件究竟是放在哪个目录的？本文将对该问题进行简单的介绍","keywords":[],"kind":"page","lang":"en","lastmod":1452644038,"objectID":"6cd4ef1410e10ef1a085cd8f5b45ae4e","permalink":"http://codelog.me/2016/01/13/where-the-package-installed-in-linux/","publishdate":"2016-01-13T00:13:58Z","readingtime":1,"relpermalink":"/2016/01/13/where-the-package-installed-in-linux/","section":"post","summary":"\u003cp\u003e大家都知道在Windows系统下安装一个软件，一般情况下该软件包的绝大部分文件都保存在安装目录里，但刚开始在Linux上安装了一个软件包，往往心中会有一个疑问，\u003cstrong\u003e究竟软件包的文件被保存到在里？\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e其实在Linux里安装软件包，系统会将软件包里不同类型的文件拷贝到不同的目录。如果你是用Debian系列的Linux系统，可以通过以下命令找出一个软件包不同类型文件所在的目录，举个例子，要查看nodejs的所有文件的分布情况：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-shell\"\u003e# dpkg -L nodejs\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e输出如下：\u003c/p\u003e","tags":["Linux"],"title":"deb包安装目录详解","type":"post","url":"/2016/01/13/where-the-package-installed-in-linux/","weight":0,"wordcount":30},{"author":null,"categories":["Tech"],"content":"一致性哈希算法在互联网中有广泛的应用，相对来说，一致性哈希算法的原理还是比较容易理解的，但在日常开发过程中发现虽然大部分同事对一致性哈希算法的原理有个大概的认识，然而能知道该算法具体实现的人却寥寥无几。","date":1444693134,"description":"一致性哈希算法在互联网中有广泛的应用，相对来说，一致性哈希算法的原理还是比较容易理解的，但在日常开发过程中发现虽然大部分同事对一致性哈希算法的原理有个大概的认识，然而能知道该算法具体实现的人却寥寥无几。","dir":"post/","excerpt_html":"一致性哈希算法在互联网中有广泛的应用，相对来说，一致性哈希算法的原理还是比较容易理解的，但在日常开发过程中发现虽然大部分同事对一致性哈希算法的原理有个大概的认识，然而能知道该算法具体实现的人却寥寥无几。","excerpt_text":"一致性哈希算法在互联网中有广泛的应用，相对来说，一致性哈希算法的原理还是比较容易理解的，但在日常开发过程中发现虽然大部分同事对一致性哈希算法的原理有个大概的认识，然而能知道该算法具体实现的人却寥寥无几。","expirydate":-62135596800,"fuzzywordcount":400,"html":"一致性哈希算法在互联网中有广泛的应用，相对来说，一致性哈希算法的原理还是比较容易理解的，但在日常开发过程中发现虽然大部分同事对一致性哈希算法的原理有个大概的认识，然而能知道该算法具体实现的人却寥寥无几。","keywords":[],"kind":"page","lang":"en","lastmod":1444693134,"objectID":"aca419de4b0a02862a6eaeb859b16641","permalink":"http://codelog.me/2015/10/12/consistent-hash-ketama/","publishdate":"2015-10-12T23:38:54Z","readingtime":2,"relpermalink":"/2015/10/12/consistent-hash-ketama/","section":"post","summary":"\u003cp\u003e有关一致性哈希算法原理及其应用讨论的文章已经足够多，如果对一致性哈希算法一点概念都没有的同学可以先参考这篇文章：\u003ca href=\"http://blog.codinglabs.org/articles/consistent-hashing.html\" title=\"一致性哈希\"\u003e一致性哈希\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e相对来说，一致性哈希算法的原理还是比较容易理解的，但在日常开发过程中发现虽然大部分同事对一致性哈希算法的原理有个大概的认识，然而能知道该算法具体实现的人却寥寥无几。当然一致性哈希算法的实现不同语言有不同的实现方式，其中较为有名的一种实现叫Ketama算法，该算法最初是由\u003ca href=\"http://www.last.fm/\" title=\"last.fm\"\u003eLast.fm\u003c/a\u003e的程序员实现的并得到了广泛的应用，一些开源框架譬如spymemcached，twemproxy等都内置了该算法的实现。\u003c/p\u003e\n\n\u003cp\u003e本文主要从spymemcached的源码出发，分析Ketama算法的具体实现。\u003c/p\u003e","tags":["算法","分布式"],"title":"一致性哈希算法之Ketama算法","type":"post","url":"/2015/10/12/consistent-hash-ketama/","weight":0,"wordcount":319},{"author":null,"categories":["Tech"],"content":"本文将深入分析java hashCode()方法的实现原理","date":1442183551,"description":"本文将深入分析java hashCode()方法的实现原理","dir":"post/","excerpt_html":"本文将深入分析java hashCode()方法的实现原理","excerpt_text":"本文将深入分析java hashCode()方法的实现原理","expirydate":-62135596800,"fuzzywordcount":400,"html":"本文将深入分析java hashCode()方法的实现原理","keywords":[],"kind":"page","lang":"en","lastmod":1442183551,"objectID":"a535e9f71d5fc3ff00dcb2669e8cf79e","permalink":"http://codelog.me/2015/09/13/java-hashcode/","publishdate":"2015-09-13T22:32:31Z","readingtime":2,"relpermalink":"/2015/09/13/java-hashcode/","section":"post","summary":"\u003cp\u003e\u003cimg src=\"http://codelog.me/img/2015-09-13-about-hashcode/658px-Setzkasten.jpg\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e图片来源:\u003c/em\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:Setzkasten.jpg\"\u003e维基百科\u003c/a\u003e\u003c/p\u003e","tags":["Java"],"title":"hashCode()的实现细节","type":"post","url":"/2015/09/13/java-hashcode/","weight":0,"wordcount":365},{"author":null,"categories":["Tech"],"content":"Java八进制整数的表达方式","date":1426010072,"description":"Java八进制整数的表达方式","dir":"post/","excerpt_html":"Java八进制整数的表达方式","excerpt_text":"Java八进制整数的表达方式","expirydate":-62135596800,"fuzzywordcount":100,"html":"Java八进制整数的表达方式","keywords":[],"kind":"page","lang":"en","lastmod":1426010072,"objectID":"cdcc230d1dfd1fda278588ec2b566ab5","permalink":"http://codelog.me/2015/03/10/java-octal-int/","publishdate":"2015-03-10T17:54:32Z","readingtime":1,"relpermalink":"/2015/03/10/java-octal-int/","section":"post","summary":"\u003cp\u003e今天在leetcode上做题的时候无意中发现下面这个问题：\u003c/p\u003e\n\n\u003cp\u003e请问下面的Java语句输出的是什么值？\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-java\"\u003eSystem.out.println(00123);\nSystem.out.println(0_123);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e答案是：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e83\n83\n\u003c/code\u003e\u003c/pre\u003e","tags":["Java"],"title":"Java 中以0开头的int变量的真实值","type":"post","url":"/2015/03/10/java-octal-int/","weight":0,"wordcount":48},{"author":null,"categories":["Tech"],"content":"Java中string.intern()方法调用会先去字符串常量池中查找相应的字符串，如果字符串不存在，就会在字符串常量池中创建该字符串然后再返回","date":1421762751,"description":"Java中string.intern()方法调用会先去字符串常量池中查找相应的字符串，如果字符串不存在，就会在字符串常量池中创建该字符串然后再返回","dir":"post/","excerpt_html":"Java中string.intern()方法调用会先去字符串常量池中查找相应的字符串，如果字符串不存在，就会在字符串常量池中创建该字符串然后再返回","excerpt_text":"Java中string.intern()方法调用会先去字符串常量池中查找相应的字符串，如果字符串不存在，就会在字符串常量池中创建该字符串然后再返回","expirydate":-62135596800,"fuzzywordcount":100,"html":"Java中string.intern()方法调用会先去字符串常量池中查找相应的字符串，如果字符串不存在，就会在字符串常量池中创建该字符串然后再返回","keywords":[],"kind":"page","lang":"en","lastmod":1421762751,"objectID":"4253d5f94aaf4b88593ad6230d169689","permalink":"http://codelog.me/2015/01/20/java-string-intern/","publishdate":"2015-01-20T14:05:51Z","readingtime":1,"relpermalink":"/2015/01/20/java-string-intern/","section":"post","summary":"\u003cp\u003e大家知道，Java中string.intern()方法调用会先去字符串常量池中查找相应的字符串，如果字符串不存在，就会在字符串常量池中创建该字符串然后再返回。\u003c/p\u003e\n\n\u003cp\u003e字符串常量池是一个固定大小的HashMap，桶的数量默认是1009, 从Java7u40开始，该默认值增大到60013。在Java6当中，字符串常量池是放在Perm空间的，从Java7开始，字符串常量池被移到Heap空间。下面，我们通过测试程序来窥探字符串常量池在Java6，Java7两个不同版本底下的内存分配情况。\u003c/p\u003e","tags":["Java"],"title":"深入理解Java String.intern() 内存模型","type":"post","url":"/2015/01/20/java-string-intern/","weight":0,"wordcount":65},{"author":null,"categories":["Tech"],"content":"接上一篇，本文将介绍Jboss AS7的类加载机制","date":1421319951,"description":"接上一篇，本文将介绍Jboss AS7的类加载机制","dir":"post/","excerpt_html":"接上一篇，本文将介绍Jboss AS7的类加载机制","excerpt_text":"接上一篇，本文将介绍Jboss AS7的类加载机制","expirydate":-62135596800,"fuzzywordcount":100,"html":"接上一篇，本文将介绍Jboss AS7的类加载机制","keywords":[],"kind":"page","lang":"en","lastmod":1421319951,"objectID":"a85b02ff198e1db55596d97b326603d4","permalink":"http://codelog.me/2015/01/15/jboss-as7-class-loading/","publishdate":"2015-01-15T11:05:51Z","readingtime":1,"relpermalink":"/2015/01/15/jboss-as7-class-loading/","section":"post","summary":"\u003cp\u003e相对于Jboss之前的版本，AS7的类加载机制完全不同，AS7的类加载是基于JBoss模块来设计，关于JBoss模块的介绍，可以看上一篇文章\u003ca href=\"http://m.com\" title=\"Jboss模块介绍\"\u003eJboss模块介绍\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"隐式模块依赖\"\u003e隐式模块依赖\u003c/h1\u003e\n\n\u003cp\u003e当你部署一个应用到Jboss容器的时候，有些依赖是隐式被加载的，例如如果部署一个Java EE的应用，包含EJBs，因为EJBs需要用到Javax.ejb.* 的包和其他一些Java EE API 相关包，包含这些包的Jar已经预先被制作成Module并且默认包含在容器里头作为JBoss AS的一部分，那么这些Jar的模块将会被自动加载。\u003c/p\u003e\n\n\u003cp\u003e那么隐式模块依赖是什么时候被加载的呢？当一个应用部署到容器里头，会经过一条叫做“deployment processors”的链。这条链上的每个processor都有方法去检测这个应用是否需要隐式加载一些模块，如果是，就将相关的依赖加载进来。\u003c/p\u003e","tags":["Jboss"],"title":"Jboss AS7 类加载机制","type":"post","url":"/2015/01/15/jboss-as7-class-loading/","weight":0,"wordcount":54},{"author":null,"categories":["Tech"],"content":"相对于Jboss之前的版本，AS7的类加载机制完全不同，AS7的类加载是基于JBoss模块来设计的, 要搞明白Jboss的类加载机制就先得搞明白Jboss的模块原理","date":1421166420,"description":"相对于Jboss之前的版本，AS7的类加载机制完全不同，AS7的类加载是基于JBoss模块来设计的, 要搞明白Jboss的类加载机制就先得搞明白Jboss的模块原理","dir":"post/","excerpt_html":"相对于Jboss之前的版本，AS7的类加载机制完全不同，AS7的类加载是基于JBoss模块来设计的, 要搞明白Jboss的类加载机制就先得搞明白Jboss的模块原理","excerpt_text":"相对于Jboss之前的版本，AS7的类加载机制完全不同，AS7的类加载是基于JBoss模块来设计的, 要搞明白Jboss的类加载机制就先得搞明白Jboss的模块原理","expirydate":-62135596800,"fuzzywordcount":100,"html":"相对于Jboss之前的版本，AS7的类加载机制完全不同，AS7的类加载是基于JBoss模块来设计的, 要搞明白Jboss的类加载机制就先得搞明白Jboss的模块原理","keywords":[],"kind":"page","lang":"en","lastmod":1421166420,"objectID":"46f4441f0831ead3b9286c9d8176f04d","permalink":"http://codelog.me/2015/01/13/jboss-as7-module-introduce/","publishdate":"2015-01-13T16:27:00Z","readingtime":1,"relpermalink":"/2015/01/13/jboss-as7-module-introduce/","section":"post","summary":"\u003cp\u003e相对于Jboss之前的版本，AS7的类加载机制完全不同，AS7的类加载是基于JBoss模块来设计的。\u003c/p\u003e\n\n\u003cp\u003e#什么是模块\n模块是classes和resources的集合，每一个模块对应着一个classloader。模块之间可以存在依赖关系，如果一个模块里面的Jar包需要用到另一个模块Jar包里面的类，那么需要显式声明模块依赖，否则模块与模块之间是不可见的。同样，如果部署一个应用到JBoss AS7容器，应用需要依赖模块，也要显式声明模块依赖。\u003c/p\u003e\n\n\u003cp\u003e如果要深入了解JBoss AS7模块加载的机制，可以看：\u003ca href=\"http://jaxenter.com/inside-the-jboss-as-7modularity-107386.html\" title=\"JBoss模块分析\"\u003eJBoss模块分析\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e#模块的好处\n1. 相同版本的Jar包不会被重复加载。\n2. 避免Jar包的版本冲突问题。\n3. 提供了更加高效的类加载机制。\u003c/p\u003e","tags":["Jboss"],"title":"Jboss AS7 模块介绍","type":"post","url":"/2015/01/13/jboss-as7-module-introduce/","weight":0,"wordcount":73},{"author":null,"categories":["Tech"],"content":"sed与awk堪称文本流处理神器，本文提供了sed命令的快速入门参考","date":1390492431,"description":"sed与awk堪称文本流处理神器，本文提供了sed命令的快速入门参考","dir":"post/","excerpt_html":"sed与awk堪称文本流处理神器，本文提供了sed命令的快速入门参考","excerpt_text":"sed与awk堪称文本流处理神器，本文提供了sed命令的快速入门参考","expirydate":-62135596800,"fuzzywordcount":100,"html":"sed与awk堪称文本流处理神器，本文提供了sed命令的快速入门参考","keywords":[],"kind":"page","lang":"en","lastmod":1390492431,"objectID":"fe378c0d16cd2c35efa8614f281192f6","permalink":"http://codelog.me/2014/01/23/sed-quick-start/","publishdate":"2014-01-23T23:53:51+08:00","readingtime":1,"relpermalink":"/2014/01/23/sed-quick-start/","section":"post","summary":"sed与awk堪称文本流处理神器，本文提供了sed命令的快速入门参考：\n删除命令 删除第N行 sed 3d abc.txt  该命令会删除第三行数据\n隔行删除 sed '1~2d' abc.txt sed '2~2d' abc.txt  第一个命令会删除奇数行数据，第二个命令会删除偶数行数据。\n删除从N行开始到M行的数据 sed '5,11d' abc.txt  删除第五行到第十一行的数据。\n删除最后一行数据 sed '$d' abc.txt  删除符合条件的行 sed /unix/d abc.txt  该命令会删除所有包含unix关键字的行\n删除符合条件的行以及紧跟着的N行 sed '/unix/,+3d' abc.txt  该命令会删除包含unix关键字的行以及该行往下3行\n删除符合条件的行到最后的行 sed '/unix/,$d' abc.txt  该命令会删除包含unix关键字的行以及该行往下到文件结尾的所有行\n删除所有空行 sed '/^$/d' abc.txt  该命令会删除abc.txt所有空白行\n删除所有注释行 我们这里假设通过符号 # 来进行注释\nsed '/#.*/d' abc.txt  该命令会删除所有注释行\n替换命令 s 代表替换符, / 是定界符\n单个替换 sed 's/old/new/'  该命令会将第一个\u0026rsquo;old\u0026rsquo;替换成\u0026rsquo;new\u0026rsquo;","tags":["Shell"],"title":"sed快速入门","type":"post","url":"/2014/01/23/sed-quick-start/","weight":0,"wordcount":85},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1442183551,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1442183551,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/java/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/java/","section":"tags","summary":"","tags":null,"title":"Java","type":"tags","url":"/tags/java/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1421319951,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1421319951,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/jboss/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/jboss/","section":"tags","summary":"","tags":null,"title":"Jboss","type":"tags","url":"/tags/jboss/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1452815027,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1452815027,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/linux/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/linux/","section":"tags","summary":"","tags":null,"title":"Linux","type":"tags","url":"/tags/linux/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1492038936,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1492038936,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/post/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/","section":"post","summary":"","tags":null,"title":"Posts","type":"post","url":"/post/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1390492431,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1390492431,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/shell/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/shell/","section":"tags","summary":"","tags":null,"title":"Shell","type":"tags","url":"/tags/shell/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1492038936,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1492038936,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/sql/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/sql/","section":"tags","summary":"","tags":null,"title":"Sql","type":"tags","url":"/tags/sql/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1442183551,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1442183551,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1492038936,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1492038936,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/categories/tech/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/tech/","section":"categories","summary":"","tags":null,"title":"Tech","type":"categories","url":"/categories/tech/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1444693134,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1444693134,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E5%88%86%E5%B8%83%E5%BC%8F/","section":"tags","summary":"","tags":null,"title":"分布式","type":"tags","url":"/tags/%E5%88%86%E5%B8%83%E5%BC%8F/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1492038936,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"home","lang":"en","lastmod":1492038936,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"技术的本质","type":"page","url":"/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1444693134,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1444693134,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"http://codelog.me/tags/%E7%AE%97%E6%B3%95/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E7%AE%97%E6%B3%95/","section":"tags","summary":"","tags":null,"title":"算法","type":"tags","url":"/tags/%E7%AE%97%E6%B3%95/","weight":0,"wordcount":0}]